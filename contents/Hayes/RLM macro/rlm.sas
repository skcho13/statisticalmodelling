
* RLM Procedure for SAS version 1.0;
* Written by Andrew F. Hayes;
* Copyright 2017;
* See Darlington and Hayes (2017);
* Regression Analysis and Linear Models;
* for documentation http://www.guilford.com/;

* This code should not be posted online except through afhayes.com ;
* without written permission. Commercial distribution is not authorized;

* Permission is hereby granted, free of charge, to any person obtaining a copy of this software;
* and associated documentation files (the "Software"), to use the software in this form.  Distribution;
* after modification is prohibited, as is its use for any commercial purpose without authorization; 
* This software should not be posted or stored on any webpage, server, or directory accessible to;
* the public whether free or for a charge unless written permission has been granted by the copyright;
* holder.  The copyright holder requests that this software be distributed by directing users to;
* processmacro.org where the latest release of the software and documentation is archived and;
* can be downloaded.  Permission is granded to install this software in university computing labs for;
* noncommercial nonprofit use;

* THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,;
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF;
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT;
* IN NO EVENT SHALL THE COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,;
*  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT;
* OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE;
* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE;

* The above text should be included in any distribution of the software;

%macro descrip (descdat=);
nnnn=nrow(&descdat);
desc1=(nnnn*(&descdat)`*&descdat)-((&descdat[+,])`*&descdat[+,]);
desc1=desc1/(nrow(&descdat)*(nrow(&descdat)-1));
desc2=vecdiag(desc1);
desc3=sqrt(desc2);
desc4=&descdat[+,]/(nrow(&descdat));
desc5=desc1/(desc3*desc3`);
%mend;

%macro domin (dx=,dy=);
iv5=&dx||&dy;
numbx=ncol(iv5)-1;
%descrip (descdat=iv5);
desc5x=desc5[1:numbx,1:numbx];
dommat=j(numbx,numbx,0);
rsqrmat=j(((2##numbx)-1),numbx+1,0);
allcomp=(2##(numbx-2));
domx=j(1,numbx,0);
do j = 1 to ((2##numbx)-1);
  domx[1,1]=domx[1,1]+1;
  do i = 1 to numbx;
    if (domx[1,i]=2) then;do;
      domx[1,i]=0;
	  domx[1,i+1]=domx[1,i+1]+1;
	end;
  end;
  rii=(domx`*domx)#desc5x;
  bin=j(1,numbx,0);
  do k = 1 to numbx;
    rii[k,k]=1;
	bin[1,k]=2##(k-1);
  end;
  riy=desc5[(numbx+1),1:numbx]#domx;
  rsqrmat[j,numbx+1]=sqrt(riy*inv(rii)*riy`);
  rsqrmat[j,1:numbx]=domx;
end;
if (subsets=1) then;do;
  prednam=nms[2:(nrow(nms)-1),1]//"R";
  print "******************************************************************************";
  temp=rsqrmat;
  temp[rank(rsqrmat[,(ncol(rsqrmat))]),]=rsqrmat;
  rsqrmats=temp;
  print rsqrmats [label="All  subsets regression results" colname=prednam format=6.4];
end;
if (dominate = 1) then;do;
  do i = 1 to (numbx-1);
    do j = (i+1) to numbx;
      critdiff=bin[1,j]-bin[1,i];
	  do k = 1 to nrow(rsqrmat);
	    if ((rsqrmat[k,i]=1) & (rsqrmat[k,j]=0)) then;do;
	      tmps=rsqrmat[k,(numbx+1)]||rsqrmat[(k+critdiff),(numbx+1)];
		  if (tmps[1,1] > tmps[1,2]) then;do;
		    dommat[i,j]=dommat[i,j]+1;
		  end;
		  if (tmps[1,1] < tmps[1,2]) then;do;
		    dommat[j,i]=dommat[j,i]+1;
		  end;
	    end;
	  end;
    end;
  end;
  prednam=nms[2:(nrow(nms)-1),1];
  dommat=dommat/allcomp;
  print "******************************************************************************";
  print dommat [label="Dominance matrix" colname=prednam rowname=prednam format=6.3];
end;
%mend;

%macro rlm (data=,y=,x=,modval=9999,jn=0,conf=95,center=0,est=0,change=1,mcfoc=0,mcmod=0,mod=0,
 plot=0,decimals=10.4,settest=0,ptiles=0,hc=5,mcx=0,zpp=1,stand=0,crossv=0,covcoeff=0,dominate=0,
 subsets=0,diagnose=xxx,contrast=-999,spline=-999); 
options pagesize=32767; 
proc iml;                                                                    
use &data;        
read all var{&y &x} into dd;
vnames={&y &x};
ninit=nrow(dd);
do i = 1 to nrow(dd);
  do j = 1 to ncol(dd);
    if (dd[i,j]=.) then;do;
      dd[i,j]=99111999;
    end;
  end;
end;
spl={&spline};
nspl=ncol(spl);
if (spl[1,1]=-999) then;do;nspl=0;end;
hypmat={&contrast};
nhypmat=ncol(hypmat);
if (hypmat[1,1]=-999) then;do;nhypmat=0;end;
rownum=j(ninit,1,0);
rowmiss=j(ninit,1,0);
good=1;bad=1;
diagnose=0;
if ("&diagnose" = "") then diagtmp="xxx";else diagtmp="&diagnose";
if (diagtmp ^= "xxx") then;do;diagnose=1;end;
do i = 1 to ninit;
  missv=0;
  do j = 1 to ncol(dd);
    if (dd[i,j]=99111999) then;do;missv=missv+1;end;
  end;
  if (missv=0) then;do;rownum[good,1]=i;good=good+1;end;
  if (missv > 0) then;do;rowmiss[bad,1]=i;bad=bad+1;end;
end;
if (good > 1) then;do;rownum=rownum[1:(good-1),1];end;
if (bad > 1) then;do;rowmiss=rowmiss[1:(bad-1),1];end;
hc3=0;
read all var{&y &x} into dd;
nm={&y &x};
read all var{&x} into x;
read all var{&y} into tempy;
tpx={&x};
tpy={&y};
xx=(dd = .);xx=xx[,+];
j=1;do i = 1 to nrow(dd);
  if xx[i,1]=0 then;do;
    dd[j,]=dd[i,];j=j+1;
  end;
end;
dd=dd[1:(j-1),];
n = nrow(dd);
note=j(10,1,0);
notes=1;
itprob=0;
conf=&conf;
settest=abs(floor(&settest));
p0=-.322232431088;
p1 = -1;
p2 = -.342242088547;
p3 = -.0204231210245;
p4 = -.0000453642210148;
q0 = .0993484626060;
q1 = .588581570495;
q2 = .531103462366;
q3 = .103537752850;
q4 = .0038560700634;
if ((floor(conf) >= 100) | (floor(conf) <= 50)) then;do;
  conf=95;note[notes,1]=8;notes=notes+1;
end;
alpha2=(1-(conf/100))/2;
cilm=alpha2*2;
y5=sqrt(-2*log(alpha2));
xp2=(y5+((((y5*p4+p3)*y5+p2)*y5+p1)*y5+p0)/((((y5*q4+q3)*y5+q2)*y5+q1)*y5+q0));
if (n < ninit) then;do;
  nmiss=ninit-n;
  note[notes,1]=1;
  notes=notes+1;
end;
nx=1;criterr=0;errs=0;
errsm=j(10,1,0);
nyv=ncol(tpy);nxv=ncol(x);
savplot=(&plot=1);ptiles=(&ptiles=1);
stand=(&stand=1);
covcoeff=(&covcoeff=1);
nomod=(&mod=0);
mcx=floor(&mcx);
hc=floor(&hc);
if ((hc >=0) & (hc < 5)) then;do;
  note[notes,1]=5;notes=notes+1;
end;
if ((hc > 5) | (hc < 0)) then;do;hc=5;end;
hclab="se(HC0)"||"se(HC1)"||"se(HC2)"||"se(HC3)"||"se(HC4)"||"se";
hcflab="F(HC0)"||"F(HC1)"||"F(HC2)"||"F(HC3)"||"F(HC4)"||"F";
hclab=hclab[1,(hc+1)];
hcflab=hcflab[1,(hc+1)];
zpp=(&zpp=1);
subsets=(&subsets=1);
dominate=(&dominate=1);
crossv=(&crossv=1);
if (nyv ^= 1) then;do;criterr=1;errs=errs+1;errsm[errs,1]=1;end;
if (good < 2) then;do;criterr=1;errs=errs+1;errsm[errs,1]=8;end;
desc1=(n*t(dd)*dd)-(t(dd[+,])*dd[+,]);
desc1=desc1/(n*(n-1));
desc2=vecdiag(desc1);desc2=(desc2 = 0);desc2=desc2[+,];
if (desc2 > 0) then;do;criterr=1;errs=errs+1;errsm[errs,1]=5;end;
ddd={"D1" "D2" "D3" "D4" "D5" "D6" "D7" "D8" "D9"};
ddd1={"int_1" "int_2" "int_3" "int_4" "int_5" "int_6" "int_7" "int_8" "int_9"};
dumok=0;
mcfoc=round(&mcfoc);mcmod=round(&mcmod);
if (mcfoc < 0) then;do;mcfoc=0;end;
if (mcfoc > 6) then;do;mcfoc=0;end;
if (mcmod < 0) then;do;mcmod=0;end;
if (mcmod > 6) then;do;mcmod=0;end;
if ((mcmod > 0) | (mcfoc > 0)) then;do;
  if (mcx ^= 0) then;do;
    note[notes,1]=6;notes=notes+1;
  end;
  mcx=0;nomod=0;
end;
if ((mcmod = 0) & (mcx > 0)) then;do;
  mcmod=mcx;
  if (mcmod < 0) then;do;mcmod=0;end;
  if (mcmod > 6) then;do;mcmod=0;end;
end;
if ((mcmod > 0) & (mcfoc > 0)) then;do;errs=errs+1;errsm[errs,1]=3;criterr=1;end;
con=j(n,1,1);
if (nxv=1) then;do;mcfoc=0;nomod=1;end;
mcloc=(mcfoc > 0);
if ((mcfoc > 0) | (mcmod > 0) | (mcx > 0) | (nomod=0)) then;do;
  if (dominate=1) then;do;
     note[notes,1]=2;notes=notes+1;dominate=0;
  end;
  if (subsets=1) then;do;
     note[notes,1]=3;notes=notes+1;subsets=0;
  end;
end;
if (((dominate=1) | (subsets=1)) & (nxv > 15 | nxv < 2) & (nspl=0)) then;do;
  dominate=0;subsets=0;
  note[notes,1]=7;notes=notes+1;
end;
ncovs=ncol(x)-2+(nxv=1);
if ((nxv < 2) & (&mod ^= 0)) then;do;
  criterr=1;errs=errs+1;errsm[errs,1]=2;
end;
if (nspl > 0) then;do;
  spld3=j(n,nspl,0);
  spld2=j(n,nspl,0);
  xsplmin=min(dd[,ncol(dd)]);
  mcheck=0;ocheck=0;
  do i = 1 to nspl;
    spld3[,i]=(dd[,ncol(dd)] > spl[1,i]);
	spld2[,i]=dd[,ncol(dd)] - spl[1,i];
	spld=spld3#spld2;
	mcheck=mcheck+(spl[1,i]=xsplmin);
	if (i > 1) then;do;
      if (spl[1,i] <= spl[1,(i-1)]) then;do;ocheck=1;end;
	end;
  end;
  spld4=spld[+,];
  fff=((spld3[+,] < 2) > 0);fff=fff[+,];
  if (ocheck=0) then;do;
    do i = 1 to nspl;
	  if (i > 1) then;do;
        if (spld[1,i] >= ((spld4[1,(i-1)])-1)) then;do;fff=1;end;
	  end;
	end;
  end;
  if (fff > 0) then;do;
    errs=errs+1;errsm[errs,1]=9;criterr=1;
  end;
  if (mcheck > 0) then;do;
    errs=errs+1;errsm[errs,1]=10;criterr=1;
  end;
  if (ocheck > 0) then;do;
    errs=errs+1;errsm[errs,1]=11;criterr=1;
  end;
  if (nspl > 10) then;do;
    errs=errs+1;errsm[errs,1]=12;criterr=1;
  end;
  dd=dd||spld;
  xnmspl=nm[1,ncol(nm)];
  if (nspl < 11) then;do;
    jlab="Joint1"||"Joint2"||"Joint3"||"Joint4"||"Joint5"||"Joint6"||"Joint7"||"Joint8"||"Joint9"||"Joint10";
	jlab=jlab[1,1:nspl];
	nm=nm||jlab;
	nmspl=jlab;
	tpx=tpx||jlab;
    nxv=nxv+nspl;
	settest=nspl+1;
  end;
  mcfoc=0;mcmod=0;nomod=1;dominate=0;subsets=0;
end;
if ((mcfoc > 0) | (mcmod >0)) then;do;
  temp=dd;temp2=rownum;
  temp[rank(dd[,(ncol(dd)-mcloc)]),]=dd;dd=temp;
  temp2[rank(dd[,(ncol(dd)-mcloc)]),]=rownum;rownum=temp2;  
  dummy=design(dd[,(ncol(dd)-mcloc)]);
  nvls=ncol(dummy);nnvls=dummy[+,];
  nnsum=j(1,ncol(nnvls),0);
  do i = 1 to ncol(nnvls);
    tt10=nnvls[1,i:ncol(nnvls)];
    nnsum[1,i]=tt10[,+];
  end;
  nnvls2=nnvls;
  toosmall=(nnvls < 2);toosmall=toosmall[,+];
  mnvls=min(nnvls`);
  if (toosmall > 0) then;do;criterr=1;errs=errs+1;errsm[errs,1]=6;end;
  if (nvls > 10) then;do;criterr=1;errs=errs+1;errsm[errs,1]=4;end;
  if (criterr=0) then;do;
    dumok=1;
    nnvls=j(nvls,1,0);
    nnvls[1,1]=dd[1,ncol(dd)-mcloc];
    temp=2;
    do i = 2 to n;
      if (dd[i,ncol(dd)-mcloc] ^= nnvls[(temp-1),1]) then;do;
        nnvls[temp,1]=dd[i,ncol(dd)-mcloc];temp=temp+1;
      end;
    end;
	dummy3=dummy;
	dummy=dummy[,1:(ncol(dummy)-1)];
	dummy2=dummy3[,2:ncol(dummy3)];
    if ((mcfoc=4) | (mcmod=4) | (mcfoc=6) | (mcmod=6)) then;do;
      minus1=j(1,ncol(dummy),-1);
	  if ((mcfoc=6) | (mcmod=6)) then;do;
        minus1=minus1#(nnvls2[1,1:(ncol(nnvls2)-1)]/nnvls2[1,ncol(nnvls2)]);
	  end;
	  do k=1 to n;
	    if (dummy[k,+] = 0) then;do;dummy[k,]=minus1;end;
	  end;
    end;
	if ((mcfoc=5) | (mcmod=5)) then;do;
      conmat1=I(nvls)*(-1);
	  do i = 1 to nvls-1;
	    do j=(2+(i-1)) to nvls;
		  conmat1[i,j]=nnvls2[1,j]/nnsum[1,(i+1)];
		end;
	  end;
	  conmat1=conmat1[1:(nrow(conmat1)-1),];
	  conmat1=conmat1`*inv(conmat1*conmat1`);
	end;
    if (((mcfoc=2) | (mcfoc=3) | (mcfoc=5)) | ((mcmod=2) | (mcmod=3) | (mcmod=5))) then;do;
	  dummy=dummy2;
      do k=1 to n;
	    if (dummy[k,+] > 0) then;do;
	      do i = 1 to ncol(dummy) while (dummy[k,i] = 0);
  		    dummy[k,i]=1;
		  end;
	    end;
	  end;
      if ((mcfoc=3)|(mcmod=3)) then;do;
        conmat1={-8 1 1 1 1 1 1 1 1,
                 0 -7 1 1 1 1 1 1 1,
                 0 0 -6 1 1 1 1 1 1,
                 0 0 0 -5 1 1 1 1 1,
                 0 0 0 0 -4 1 1 1 1,
                 0 0 0 0 0 -3 1 1 1,
                 0 0 0 0 0 0 -2 1 1,
                 0 0 0 0 0 0 0 -1 1};
        do i = 1 to 8;conmat1[i,]=conmat1[i,]/(10-i);end;
   	    conmat1=conmat1[(10-nvls):8,(10-nvls):9]`;
        do k = 1 to n;
	      dummy[k,]=conmat1[(dummy[k,+]+1),];
	    end;
      end;
    end;
	if ((mcfoc=5) | (mcmod=5)) then;do;
      do k = 1 to n;
	    tt10=dummy[k,+];
	    dummy[k,]=conmat1[(tt10[,+]+1),];
	  end;
	end;
    nx=ncol(dummy);
    xname=ddd[1,1:nx];
    xname2=nm[1,(ncol(nm)-mcloc)];
	xname2=xname2||xname;
    indlbs=xname`;
    dummat=j((nx+1),nx,0);
    dummat2=dummat;
	dummat2[1:(nrow(dummat)-1),]=I(nx);
    dummat[(2:nrow(dummat)),]=I(nx);
	if ((mcfoc=1) | (mcmod=1)) then;do;
      dummat=dummat2;
	end;
    if ((mcfoc=2)|(mcmod=2)) then;do;
      do i = 1 to nrow(dummat); 
	    do j = 1 to (i-1);
	      dummat[i,j]=1;
	    end;
	  end;
    end;
    if ((mcfoc=3) | (mcmod=3)) then;do;dummat=conmat1;end;
    if ((mcfoc=4) | (mcmod=4) | (mcfoc=6) | (mcmod=6)) then;do;
	  dummat=dummat2;
      dummat[nrow(dummat2),]=minus1;
    end;
	if ((mcfoc=5) | (mcmod = 5)) then;do;
      dummat=conmat1;
	end;
	dummat=nnvls||dummat;
  end;
end;
if ((&modval ^= 9999) & (mcmod ^= 0)) then;do;
  note[notes,1]=4;notes=notes+1;
end;
if ((mcx ^=0) & (mcfoc ^= 0)) then;do;
  note[notes,1]=6;notes=notes+1;
end;

* all do ends ok to here;

print "********************** RLM Procedure for SAS Release 1.00 ********************";
print "              Written by Andrew F. Hayes, Ph.D.  www.afhayes.com           ";
print "******************************************************************************";
y=dd[,1];
ovals=ncol(design(dd[,1]));
if (ovals = 2) then;do;
  criterr=1;errs=errs+1;errsm[errs,1]=7;
end;
if (criterr=0) then;do;
  jnerr = 0;
  jn=(&jn=1);
  alperr=0;
  sstotal = ssq(y-((y[+,])/n));
  outv=nm[1,1];
  mdtr = nm[1,ncol(dd)];
  fciv = nm[1,ncol(dd)-1];
  centerv={" "};
  if ((&center = 1) & (mcmod=0) & (nomod=0)) then;do;
    dd[,ncol(dd)]=dd[,ncol(dd)]-(dd[+,ncol(dd)]/n);
	centerv=centerv||mdtr;
  end;
  if ((&center = 1) & (mcfoc=0) & (nomod=0)) then;do;
    dd[,(ncol(dd)-1)]=dd[,(ncol(dd)-1)]-(dd[+,(ncol(dd)-1)]/n);
	centerv=centerv||fciv;
  end;
  if ((mcfoc=0) & (mcmod=0)) then;do;
    x=con||dd[,2:ncol(dd)];
	if (nomod=0) then;do;
      inter = dd[,(ncol(dd)-1)]#dd[,ncol(dd)];
	  x=x||inter;
	end;
    nms=nm[1,2:ncol(dd)];
  end;
  if ((mcfoc ^=0) | (mcmod ^=0)) then;do;
    inter=j(n,nx,0);
	do i = 1 to nx;
	  inter[,i] = dummy[,i]#dd[,(ncol(dd)-(1-mcloc))];
    end;
    if (ncovs = 0) then;do;
	  x=con||dummy;
	  if (nxv > 1) then;do;
        x=con||dd[,(ncol(dd)-(1-mcloc))]||dummy;
	  end;
      if (nomod=0) then;do;x=x||inter;end;
	  nms=nm[1,(ncol(dd)-(1-mcloc))]||(ddd[1,1:ncol(dummy)])||(ddd1[1,1:ncol(dummy)]);
	  if (nxv=1) then;do;
        nms=ddd[1,1:ncol(dummy)];
	  end;
	end;
	if (ncovs > 0) then;do;
	  x=con||dd[,2:(1+ncovs)]||dummy;
      if (nxv >1) then;do;
	    x=con||dd[,2:(1+ncovs)]||dd[,ncol(dd)-(1-mcloc)]||dummy;
	  end;
	  if (nomod=0) then;do;x=x||inter;end;
	  nms=nm[1,2:(1+ncovs)]||nm[1,(ncol(dd)-(1-mcloc))]||(ddd[1,1:ncol(dummy)])||(ddd1[1,1:ncol(dummy)]);
	  if (nxv=1) then;do;
	    nms=nm[1,2:(1+ncovs)]||ddd[1,1:ncol(dummy)];
	  end;
	end;
  end;
  xmns=(x[+,])/n;
  focvals = 1||0||0;
  highwarn = 0;lowwarn = 0;
  if (ncol(x) > (2*nx+2)) then;do;
    covmns = 1||xmns[1,2:(ncol(x)-1-(2*nx))];
    focvals = covmns||0||0;
  end;
  dfres = n-ncol(x);
  invxtx=inv(x`*x);
  b=invxtx*x`*y;
  pred=x*b;
  resid=y-(x*b);
  ssresid=ssq(resid);
  msresid=ssresid/dfres;
  hat=vecdiag(x*invxtx*x`);
  yh=((x*b)-hat#y)/(1-hat);
  stri=resid/sqrt((1-hat)*msresid);
  tri=stri#sqrt((dfres-1)/(dfres-(stri#stri)));
  ptri=2*(1-probt(abs(tri),dfres-1));
  bp=n*ptri;
  bpm=bp-1;
  bp=bp-(bpm#(bp > 1));
  xmins=x[><,];xmaxs=x[<>,];
  ymin=min(y);ymax=max(y);
  yhmin=min(pred);yhmax=max(pred);
  resmin=min(resid);resmax=max(resid);
  trmin=min(tri);trmax=max(tri);
  varb=msresid*invxtx;
  sehom=sqrt(vecdiag(varb));
  seint=sqrt(varb[nrow(varb),nrow(varb)]);
  k3=nrow(b);
  if (hc ^= 5) then;do;
    xhc=x;
	h=xhc[,1];
	if ((hc = 0) | (hc = 1)) then;do;
      do i3 = 1 to k3;
        xhc[,i3]=xhc[,i3]#resid;
	  end;
	end;
	if ((hc = 3) | (hc = 2)) then;do;
      do i3=1 to k3;
	    xhc[,i3]=(resid/(1-hat)##(1/(4-hc)))#xhc[,i3];
	  end;
	end;
	if (hc=4) then;do;
      hcmn=j(n,2,4);
	  hcmn[,2]=(n*hat)/k3;
	  do i3 = 1 to k3;
        xhc[,i3]=(resid/(1-hat)##(hcmn[,><]/2))#xhc[,i3];
	  end;
	end;
	varb=invxtx*xhc`*xhc*invxtx;
	if (hc=1) then;do;
      varb=(n/dfres)#varb;
	end;
  end;
  seb=sqrt(vecdiag(varb));
  r2=(1-ssresid/sstotal);  
  if ((mcfoc ^= 0) | (mcmod ^=0)) then;do;
    ytp=y;
	xtp=x[,1:(ncol(x)-nx)];
	btp=inv(xtp`*xtp)*xtp`*ytp;
	residt=ytp-(xtp*btp);
	ssresidt=ssq(residt);
	r2noint=1-(ssresidt/sstotal);
  end;
  pr=ncol(x)-1;
  adjr2=r2-((pr*(1-r2))/dfres);
  adjr2=adjr2*(1-(adjr2 < 0));
  pratt2=1-((((n-3)*(1-r2))/(n-pr-1))*(1+((2*(1-r2))/(n-pr-(2/3)))));
  pratt2=pratt2*(1-(pratt2 < 0));
  seest=sqrt(msresid);
  if (zpp ^= 0) then;do;
    srrat=b/sehom;
	sign=b/abs(b);
	semir=srrat*sqrt((1-r2)/(n-pr-1));
	partialr=sqrt((srrat#srrat)/((srrat#srrat)+dfres))#sign;
	part=semir||partialr;
	iv5=x[,2:ncol(x)];
	iv5=iv5||y;
	%descrip (descdat=iv5);
    btilde=b[2:nrow(desc3),]#(desc3[1:(nrow(desc3)-1)])/desc3[nrow(desc3),1];
	ivnms=nms;
	zppr=desc5[nrow(desc5),1:(ncol(desc5)-1)];
	part=zppr`||part[2:nrow(part),]||btilde;
  end;
  if (crossv ^= 0) then;do;
    browne=0;
	iv5=y||yh;
	%descrip (descdat=iv5);
	lvout1=desc5[2,1];
	if (adjr2 >= 0) then;do;
	  rho4=(adjr2*adjr2)-((2*pr*(1-adjr2)*(1-adjr2))/((n-1)*(n-pr+1)));
      if (rho4 >= 0) then;do;
	    browne=sqrt(((n-pr-3)*rho4+adjr2)/((n-2*pr-2)*adjr2+pr));
	  end;
	end;
	my=y[+,]/n;
	newsse=(ssresid#(n-pr-2))/((tri#tri)+n-pr-2);
	dleave=(my-y)/(n-1);
	yd=y-my;
    newtss=sstotal+n#(dleave#dleave)-((y-my-dleave)#(y-my-dleave));
    newvhaty=(newtss/n)#(1-newsse/newtss);
	zh=(yh-dleave-my)/sqrt(newvhaty);
    temp=y||zh;
    %descrip (descdat=temp);
    lvout2=desc5[2,1];
    crossr=browne||lvout1||lvout2;
  end;
  lmat=I(nrow(b));lmat=lmat[,2:ncol(lmat)];
  f=(((lmat`)*b)`*inv(lmat`*varb*lmat)*(lmat`*b))/pr;
  pf2=1-probf(f,pr,dfres);
  pf=sqrt(r2)||r2||f||pf2||seest;
  rsqm=adjr2||pratt2;
  tval=sqrt((dfres*(exp((dfres-(5/6))*((xp2/(dfres-(2/3)+(.11/dfres)))*(xp2/(dfres-(2/3)+(.11/dfres)))))-1)));
  if (itprob = 0) then;do;
    tstat = b/seb; 
    p=2*(1-probt(abs(tstat),dfres));
    outp=b||seb||tstat||p;
    nms="CONSTANT"//nms`//"INTERACT";
	outp=outp||(b-tval#seb)||(b+tval#seb);
    bb=tval*tval;
	print outv [label="Dependent Variable:"];
	if (nomod=0) then;do;
      print fciv [label="Focal Predictor:"];
	  print mdtr [label="Moderator:"];
	end;
	if (dumok = 1) then;do;
      if ((mcfoc > 0) | (mcmod > 0) | (mcx > 0)) then;do;
	    print "Coding of categorical predictor for analysis:";
        print dummat [colname=xname2 label = " " format=6.3];
      end;
	end;
	print n [label="Sample size:"];
    if (nspl > 0) then;do;
      print spl [label="Location of spline joints:" rowname=xnmspl colname=nmspl format=5.3];
	end;
	cns = {"R" "R-sq" "F" "p" "SEofEst"};
	blk=" ";
    print pf [label = "Complete Model Regression Summary" colname = cns rowname = blk format = &decimals];
	cns = {"Adj. Rsq" "PrattRsq"};
	print rsqm [label="Population R-squared estimates" colname=cns rowname=blk format=&decimals];
	if (crossv ^=0) then;do;
	  cns={"Browne" "LvOut1" "LvOut2"};
      print crossr [label="Shrunken R estimates" format=&decimals colname=cns rowname=blk];
	end;
    sumtab1=(sstotal-ssresid)||pr||((sstotal-ssresid)/pr);
	sumtab2=ssresid||dfres||(ssresid/dfres);
	sumtab3=sstotal||(pr+dfres)||(sstotal/(pr+dfres));
    sumtab=sumtab1//sumtab2//sumtab3;
	cns= {"SS" "df" "MS"};
	rntmp={"Regress" "Residual" "Total"};
    print sumtab [label="ANOVA summary table" colname=cns rowname=rntmp format=&decimals];
    lmat=j(nrow(b),1,0);lmat[nrow(lmat),1]=1;
    fcha=((((lmat`)*b)`*inv(lmat`*varb*lmat)*(lmat`*b)))/1;
	rcha=((b[nrow(b),1]/seint)*(b[nrow(b),1]/seint))*(1-r2)/dfres;
    rcha = rcha||fcha||1||dfres||outp[(pr+1),4];
    cns = "Coeff"||hclab||"t"||"p"||"LLCI"||"ULCI";
    print outp [rowname = nms colname = cns label = "Regression Model" format = &decimals];
    if ((mcfoc > 0) | (mcmod > 0)) then;do;
	  rcha=r2-r2noint;
      lmat=j((nrow(b)-nx),nx,0);
	  lmat2=I(nx);lmat=lmat//lmat2;
	  fcha=((((lmat`)*b)`*inv(lmat`*varb*lmat)*(lmat`*b)))/nx;
	  pvalr2c=1-probf(fcha,nx,dfres);
	  rcha=rcha||fcha||nx||dfres||pvalr2c;
	end;
	if ((mcfoc = 0) & (mcmod = 0) & (nomod = 0)) then;do;
	  cprod=nms[(ncol(dd)-1),1]||"X"||nms[ncol(dd),1];
      print cprod [label = "Interact is defined as:"];
	end;
	if (((mcfoc > 0) | (mcmod > 0)) & (nomod = 0)) then;do;
	  intkey="a"||"b"||"c"||"d"||"e";
      do i = 1 to nx;
	    tmpintk=ddd1[1,i]||" : "||ddd[1,i]||" X "||nm[1,(ncol(dd)-(1-mcloc))];
	    intkey=intkey//tmpintk;
      end;
	  intkey=intkey[2:nrow(intkey),];
	  print intkey [label = "Product terms key:"];
	end;
    if ((&change ^= 0) & (nomod = 0)) then;do;
	  cns = {"R2-chng" "F" "df1" "df2" "p"};
	  print rcha [label = "R-square increase due to interaction:" colname=cns format=&decimals];
    end;
    ivnms=nms[2:nrow(nms)];
	if (zpp=1) then;do;
      if (stand=1) then;do;
	    cns={"r" "sr" "pr" "stand"};
        print part [label="Simple(r), semipartial (sr), and partial (pr) correlations and standardized coefficients (stand)"
		    colname=cns rowname=ivnms format=&decimals];
	  end;
	  if (stand=0) then;do;
	    part=part[,1:(ncol(part)-1)];
	  	cns={"r" "sr" "pr"};
        print part [label="Simple(r), semipartial (sr), and partial (pr) correlations" colname=cns rowname=ivnms format=&decimals];
	  end;
	end;
	if ((nomod = 0) & (settest > 0)) then;do;
      settest=0;note[notes,1]=9;notes=notes+1;
	end;
	if (settest > nxv) then;do;
      settest=0;note[notes,1]=10;notes=notes+1;
	end;
	if (settest > 0) then;do;
      if (mcx > 0) then;do;settest=settest+nx-1;end;
	  lmat=j((nrow(b)-settest),settest,0);
	  lmat2=I(settest);
	  lmat=lmat//lmat2;
	  fcha=((((lmat`)*b)`*inv(lmat`*varb*lmat)*(lmat`*b)))/settest;
	  pvalr2c=1-probf(fcha,settest,dfres);
	  pf=fcha||settest||dfres||pvalr2c;
      print "*****************************************************************************";
	  if (nspl=0) then;do;
	    cnms="F"||"df1"||"df2"||"p";
        print pf [label="Hypothesis test for regressor set" colname=cnms format=&decimals];
		tmpxxx=tpx[1,(ncol(tpx)+1-settest+(nx-1)):ncol(tpx)];
		print tmpxxx [label="Regressors in the set:"];
	  end;
	  if (nspl > 0) then;do;
	    cnms="F"||"df1"||"df2"||"p";
        print pf [label="Hypothesis test for spline function" colname=cnms format=&decimals];
		tmpxxx=tpx[1,(ncol(tpx)+1-settest+(nx-1)):ncol(tpx)];
		print tmpxxx [label="Regressors defining the spline set:"];
	  end;
	end;
	if (covcoeff=1) then;do;
	  print "*****************************************************************************";
      print varb [label="Variance-covariance matrix of regression coefficients" rowname=nms colname=nms format=&decimals];
	end;
	if ((subsets=1) | (dominate=1)) then;do;
	  iv5=x[,2:ncol(x)];
	  %domin (dx=iv5,dy=y);
	end;
	if ((nhypmat > 0) & (nhypmat ^= nrow(b))) then;do;
      note[notes,1]=11;notes=notes+1;
	end;
	if (nhypmat = nrow(b)) then;do;
      print "****************************** LINEAR HYPOTHESIS ******************************";  
      tmpxxx=hypmat`;blk="weight";
      print tmpxxx [label="Contrast vector:" rowname=nms colname = blk format=&decimals];
	  hypval=hypmat*b;
	  seoft=sqrt(hypmat*varb*hypmat`);
	  outp=outp||(b-tval#seb)||(b+tval#seb);
	  pval=2*(1-probt(abs(hypval/seoft),dfres));
	  conres=hypval||seoft||(hypval/seoft)||pval||(hypval-tval*seoft)||(hypval+tval*seoft);
	  outlab2="Value"||hclab||"t"||"p"||"LLCI"||"ULCI";
	  print conres [label = "Linear Hypothesis Test" colname=outlab2 format=&decimals];
	end;
	if (nomod=0) then;do;
	  mdvar=x[,(ncol(x)-1)];
	  if ((mcfoc = 0) & (mcmod = 0)) then;do;
        g1=b[(ncol(x)-2),1];
        g3=b[ncol(x),1];
        vg1=varb[(ncol(x)-2),(ncol(x)-2)];
        vg3=varb[ncol(x),ncol(x)];
        covg1g3=varb[(ncol(x)-2),ncol(x)];
	  end;
	  if ((mcfoc > 0) | (mcmod > 0)) then;do;
        mdvar=x[,(ncol(x)-(2*nx))];
	  end;
      mdmin=min(mdvar);
      mdmax=max(mdvar);
      fvar=x[,(ncol(x)-2)];
      nval=ncol(design(mdvar));
      fvmin=min(fvar);
      fvmax=max(fvar);
      if (&modval = 9999) then;do;
        if (jn < 1) then;do;
          mnmd=mdvar[+,]/n;
          tmp=j(n,1,mnmd);
          sdmd = sqrt(ssq(mdvar-tmp)/(n-1));
          probeval = (mnmd-sdmd)//mnmd//(mnmd+sdmd);
		  if (ptiles=1) then;do;
            tmp=mdvar;tmp[rank(mdvar[,1]),]=mdvar;mdvar=tmp;
			probeval=mdvar[floor(0.25*n),1]//mdvar[floor(0.5*n),1]//mdvar[floor(0.75*n),1];
		  end;
        end;
      end;
      if (nval = 2) then;do;
        probeval = j(2,1,0);
        probeval[1,1]=min(mdvar);
        jn = 0;
        do i = 1 to n;
          if (mdvar[i,1] ^= probeval[1,1]) then;do;
   	        probeval[2,1]=mdvar[i,1];
	        goto stpit;
	      end;
        end;
        stpit:
      end;
      if (&modval ^= 9999) then;do;
        if (jn < 1) then;do;
  	      probeval = &modval;
  	    end;
      end;
      if (jn < 1) then;do;
	    outp = j(nrow(probeval),7,0);
	    if ((mcfoc=0) & (mcmod = 0)) then;do;
          do i = 1 to nrow(probeval);
            x2=probeval[i,1];
	        w1=g1+g3*x2;
	        varw1=vg1+(2*x2*covg1g3)+((x2*x2)*vg3);
	        sew1=sqrt(varw1);
	        t1=w1/sew1;
	        LLCI=(w1-tval#sew1);
	        ULCI=(w1+tval#sew1);
	        if (ovals ^= 2) then;do;
              p=2*(1-probt(abs(t1),dfres));
            end;
	        if (ovals = 2) then;do;
	          p=2*(1-probnorm(abs(t1)));
	        end;
            do j = 0 to 20;
	          temp=(fvmin+j*((fvmax-fvmin)/20));
	          if (ncol(x)>4) then;do;
		        focvals = focvals//(covmns||temp||probeval[i,1]);
		      end;
			  * not sure about this;
	          else;do;
		        focvals = focvals//(1||temp||probeval[i,1]);
		      end;
			end;
			outp[i,]=x2||w1||sew1||t1||p||LLCI||ULCI;
          end;
          focvals = focvals[2:nrow(focvals),];
          inter2=focvals[,(ncol(focvals)-1)]#focvals[,ncol(focvals)];
          focvals=focvals||inter2;
          yhat=focvals*b;
		  seyhat=sqrt(vecdiag(focvals*varb*focvals`));
          focvals=focvals[,(ncol(focvals)-2):(ncol(focvals)-1)]||yhat||seyhat;
        end;
		if ((mcfoc > 0) | (mcmod > 0)) then;do;
          focvals=j(1,(ncol(x)+1),1);
		  if (mcfoc > 0) then;do;
		    print "Conditional Effect of Focal Predictor at Values of the Moderator Variable";
			rnn2=mdtr;
			matt=j(nx,6,0);
		  end;
          do jj = 1 to nrow(probeval);
            if (mcfoc > 0) then;do;
              do ii = 1 to nx;
                g1=b[(ncol(x)-(2*nx)+ii),1];
				g3=b[(ncol(x)-nx+ii),1];
				vg1=varb[(ncol(x)-(2*nx)+ii),(ncol(x)-(2*nx)+ii)];
				vg3=varb[(ncol(x)-nx+ii),(ncol(x)-nx+ii)];
				covg1g3=varb[(ncol(x)-(2*nx)+ii),(ncol(x)-nx+ii)];
				x2=probeval[jj,1];
				w1=g1+g3*x2;
				varw1=vg1+(2*x2*covg1g3)+((x2*x2)*vg3);
				sew1=sqrt(varw1);
				t1=w1/sew1;
				if (ovals ^= 2) then;do;
				  LLCI=(w1-tval#sew1);
				  ULCI=(w1+tval#sew1);
				  p=2*(1-probt(abs(t1),dfres));
				  cnms="Coeff"||hclab||"t"||"p"||"LLCI"||"ULCI";
				  matt[ii,]=w1||sew1||t1||p||llci||ulci;
				end;
			  end;
              rnms=xname`;
			  mdvalpr=probeval[jj,1];
			  print mdvalpr [label="Moderator value:" rowname=rnn2 format=&decimals];
			  print matt [label=" " rowname=rnms colname=cnms format=&decimals];
			  xprob=x[,(ncol(x)-(2*nx))]-mdvalpr;
			  do kk = 1 to nx;
			    xprob=xprob||(xprob[,1]#x[,(ncol(x)-(2*nx)+kk)]);
			  end;
			  xprob=x[,(1:(ncol(x)-(2*nx)-1))]||xprob;
			  bmultc=inv(xprob`*xprob)*xprob`*y;
		      residc=y-(xprob*bmultc);
			  ssresidc=ssq(residc);
			  r2c=r2-(1-(ssresidc/sstotal));
			  fcha2=(dfres*r2c)/(nx*(1-r2));
			  *start here;
              if (hc ^= 5) then;do;
				do kk=1 to nx;
				  xprob=xprob||x[,(ncol(x)-(2*nx)+kk)];
				end;
                bmultc=inv(xprob`*xprob)*xprob`*y;
				k3=nrow(bmultc);
                xhc=xprob;hat=xhc[,1];
                do i3=1 to n;
	              hat[i3,1]=xhc[i3,]*inv(xprob`*xprob)*(xhc[i3,])`;
	            end;
                if ((hc = 0) | (hc=1)) then;do;
                  do i3 = 1 to k3;
                    xhc[,i3]=xhc[,i3]#resid;
				  end;
				end;
				if ((hc = 3) | (hc = 2)) then;do;
				  do i3=1 to k3;
                    xhc[,i3]=(resid/(1-hat)##(1/(4-hc)))#xhc[,i3];
				  end;
				end;
				if (hc=4) then;do;
                  hcmn=j(n,2,4);
	              hcmn[,2]=(n*hat)/k3;
	              do i3 = 1 to k3;
                    xhc[,i3]=(resid/(1-hat)##(hcmn[,><]/2))#xhc[,i3];
	              end;
	            end;
	            varbc=(inv(xprob`*xprob)*xhc`*xhc*inv(xprob`*xprob));
				if (hc=1) then;do;
                  varbc=(n/dfres)*varbc;
				end;
				lmat=j((nrow(bmultc)-nx),nx,0);
                lmat2=I(nx);
				lmat=lmat//lmat2;
				fcha2=((((lmat`)*bmultc)`*inv(lmat`*varbc*lmat)*(lmat`*bmultc)))/nx;
	          end;
		      pvalr2cc=1-probf(fcha2,nx,dfres);
			  rcha2=r2c||fcha2||nx||dfres||pvalr2cc;
			  cnms="R2-chng"||"F"||"df1"||"df2"||"p";
			  print rcha2 [label = "Test of equality of conditional means at this value of the moderator"
				 colname = cnms format = &decimals];
            end;
            ttttt=j(nrow(dummat),1,probeval[jj,1]);
			ttttt=ttttt||dummat[,2:ncol(dummat)];
			do kkk=1 to nx;
              ttttt=ttttt||(ttttt[,1]#ttttt[,(1+kkk)]);
			end;
			ones=j(nrow(dummat),1,1);
            if (ncol(x) > (2*nx+2)) then;do;
              covmnmat=j(nrow(ttttt),ncol(covmns),0);
			  do kkk=1 to nrow(ttttt);
                covmnmat[kkk,]=covmns;
			  end;
			  ttttt=covmnmat||ttttt;
			end;
			if (ncol(x) <= (2*nx+2)) then;do;
              ttttt=ones||ttttt;
			end;
			focmtt=dummat[,1]||ttttt;
            focvals=focvals//focmtt;
			if (mcfoc > 0) then;do;
              yhat=dummat[,1]||(ttttt*b);
		      cmnms=fciv||"yhat";
			  print "Estimated conditional means at this value of the moderator";
			  print yhat [label = " " colname = cmnms format=&decimals];
			  if (jj ^= nrow(probeval)) then;do;
		        print "---------------------------------";
			  end;
		    end;
		  end;
          focvals=focvals[2:nrow(focvals),];
		  yhat=focvals[,2:ncol(focvals)]*b;
		  seyhat=sqrt(vecdiag((focvals[,2:ncol(focvals)])*varb*(focvals[,2:ncol(focvals)])`));
		  focvals=focvals[,1]||focvals[,(ncol(focvals)-(2*nx))]||yhat||seyhat;
		  cnms=fciv||mdtr||"yhat"||"se(yhat)";
		  if (mcmod > 0) then;do;
            cnms=mdtr||fciv||"yhat"||"se(yhat)";
		  end;
		end;
        if (mcmod > 0) then;do;
          outp=j((nx+1),7,0);
		  bcatm=b[(ncol(x)-(2*nx)),1]//b[(ncol(x)-nx+1):ncol(x),1];
		  outp[,1]=dummat[,1];
		  bcatcov=varb[(ncol(x)-nx):ncol(x),(ncol(x)-nx):ncol(x)];
		  bcatcov[1,1]=varb[(ncol(x)-(2*nx)),(ncol(x)-(2*nx))];
		  bcatcov[2:nrow(bcatcov),1]=varb[(ncol(x)-nx+1):ncol(x),(ncol(x)-2*nx)];
		  bcatcov[1,2:nrow(bcatcov)]= (varb[(ncol(x)-nx+1):ncol(x),(ncol(x)-2*nx)])`;
		  do i = 1 to nrow(dummat);
		    catmval=1||dummat[i,2:ncol(dummat)];
			condeff=catmval*bcatm;
			condse=sqrt(catmval*bcatcov*catmval`);
			outp[i,2:3]=condeff||condse;
		  end;
		  outp[,4]=outp[,2]/outp[,3];
		  outp[,5]=2*(1-probt(abs(outp[,4]),dfres));
		  outp[,6]=outp[,2]-tval#outp[,3];
		  outp[,7]=outp[,2]+tval#outp[,3];
	      cnmms=xname2[1,1]||"Coeff"||hclab||"t"||"p"||"LLCI"||"ULCI";
		  rnmms=" ";
		  print outp [label="Conditional Effect of Focal Predictor in Groups Defined by the Moderator Variable" 
		    colname=cnmms rowname = rnmms format=&decimals];
		end;
        if ((mcfoc=0) & (mcmod=0)) then;do;
          cnms=nms[(ncol(x)-1),1]||"Coeff"||hclab||"t"||"p"||"LLCI"||"ULCI";
		  print outp [colname = cnms rowname = "" label = "Conditional Effect of Focal Predictor at Values of the Moderator Variable" format = &decimals];
		end;
        if (probeval[1,1] < mdmin) then;do;
	      lowwarn = 1;
	    end;
        if (probeval[nrow(probeval),1] > mdmax) then;do;
	      highwarn = 1;
	    end; 
        if (nval > 2) then;do;
	      if (&modval = 9999) then;do;
	        if (mcmod=0) then;do;
			  if (ptiles ^= 1) then;do;
	            print "Moderator values are the sample mean and plus/minus one SD from mean";
		      end;
			  if (ptiles = 1) then;do;
				print "Moderator values are the 25th, 50th, and 75th percentiles of the moderator distribution";
			  end;
	          if ((highwarn = 1) & (ptiles=0)) then;do;
  		        print "Warning: One SD above the mean is beyond the available data";
		      end;
	          if ((lowwarn = 1) & (ptiles=0)) then;do;
		        print "Warning: One SD below the mean is beyond the available data";
		      end;
	        end;
          end;
        end;
        if (nval = 2) then;do;
	      if (&modval = 9999) then;do;
	        print "The moderator variable is dichotomous";
	      end;
	    end;
      end; 
      if ((jn > 0) & (nval > 2) & (mcmod=0) & (mcfoc = 0)) then;do;
	    ajn = (bb*vg3)-(g3*g3);
	    bjn = 2*((bb*covg1g3)-(g1*g3));
	    cjn = (bb*vg1)-(g1*g1);
	    radarg=(bjn*bjn)-(4*ajn*cjn);
	    den = 2*ajn;
	    nrts = 0;
        if ((radarg >= 0) & (den ^= 0) & (nval ^= 2)) then;do;
	  	  x21 = (-bjn+sqrt(radarg))/den;
		  x22 = (-bjn-sqrt(radarg))/den;
		  roots = 0;
		  if (x21 >= mdmin) then;do;
	        if (x21 <= mdmax) then;do;
		      nrts = 1;
		      roots = roots//x21;
		  	end;
		  end;
		  if (x22 >= mdmin) then;do;
			if (x22 <= mdmax) then;do;
			  nrts = nrts+1;
			  roots = roots//x22;
			end;
	      end;
		  if (nrts > 0) then;do;
			roots = roots[2:nrow(roots),1];
			cuts=j(nrow(roots),2,0);
			do j=1to nrow(roots);
			  tmp=(dd[,ncol(dd)] < roots[j,1]);
              cuts[j,1]=tmp[+,]/(.01*n);
              tmp=(dd[,ncol(dd)] > roots[j,1]);
              cuts[j,2]=tmp[+,]/(.01*n);
			end;
			roots=roots||cuts;
			if (jn = 1) then;do;
			  clbs="Value"||"% below"||"% above";
			  print "Moderator Value(s) Defining Nonsimultaneous Johnson-Neyman Significance Region(s)";
			  print roots [label = "" colname = clbs format = &decimals];
            end;
            if (jn = 2) then;do;
			  clbs="Value"||"% below"||"% above";
			  print "Moderator Value(s) Defining Simultaneous Johnson-Neyman Significance Region(s)";
			  print roots [label = "" colname = clbs format = &decimals];
            end;
	      end;
          if (nrts = 0) then;do;
            print "There are no regions of significance for the procal predictor within the observed range of the moderator";
          end;
        end;
        probeval = 0;
	    do j = 0 to 20;
	      temp=(mdmin+j*((mdmax-mdmin)/20));
	      probeval = probeval//temp;
	    end;
	    probeval=probeval//(mdmax+5);
	    if (nrts > 0) then;do;
	      do i = 1 to nrts;
	        do j = 1 to (nrow(probeval)-1);
		      if (roots[i,1]) > probeval[j,1] then;do;
		        if roots[i,1] < probeval[(j+1),1] then;do;
			      probeva2 = probeval[1:j,1]//roots[i,1]//probeval[(j+1):nrow(probeval),1];
			    end;
		      end;
		    end;
		    probeval=probeva2;
	      end;
	    end;
        probeval=probeval[2:(nrow(probeval)-1),1];
        outp = j(nrow(probeval),7,0);
        do i = 1 to nrow(probeval);
	      x2=probeval[i,1];
	      w1=g1+g3*x2;
	      varw1 = vg1+(2*x2*covg1g3)+((x2*x2)*vg3);
	      sew1 = sqrt(varw1);
	      t1=w1/sew1;
	      LLCI = (w1-tval#sew1);
	      ULCI = (w1+tval#sew1);
          p=2*(1-probt(abs(t1),dfres));
          cnms=nms[(ncol(x)-1),1]||"Coeff"||hclab||"t"||"p"||"LLCI"||"ULCI";
          outp[i,]=x2||w1||sew1||t1||p||LLCI||ULCI;
	    end;
	    if (jn = 2) then;do;
	      outp = outp[,1]||outp[,6:7];
	      cnms = nms[(ncol(x)-1),1]||"LLCI"||"ULCI";
	    end;
        print "Conditional Effect of Focal Predictor at Values of Moderator Variable";
	    print outp [colname = cnms label = "" format = &decimals];
	    print "Alpha level used for Johnson-Neyman method and confidence intervals:";
	    print cilm [label = "" format = &decimals];
      end;
      if ((&modval ^= 9999) & (mcmod=0)) then;do;
        if (&modval < mdmin) then;do;
	      print "Warning: MODVAL is outside of the range of the data";
	    end;
        if (&modval > mdmax) then;do;
	      print "Warning: MODVAL is outside of the range of the data";
	    end;
      end;
      if ((mcfoc=0) & (mcmod = 0)) then;do;
        if (jn < 1) then;do;
	      fvdes = ncol(design(fvar));
	      if (fvdes = 2) then;do;
	        fv1 = min(fvar);
	        fv2 = max(fvar);
	        r = 1;
	        do j = 1 to nrow(focvals);
	          if (focvals[j,1]=fv1) then;do;
		        focvals[r,]=focvals[j,];
		        r=r+1;
		      end;
		      if (focvals[j,1]=fv2) then;do;
		        focvals[r,]=focvals[j,];
		        r=r+1;
		      end;
            end;
	        focvals = focvals[1:(r-1),];
	      end;
	    end;
	  end;
      if ((savplot = 1) & (jn < 1)) then;do;
	    if ((mcfoc=0) & (mcmod=0)) then;do;
          cnms = (nms[(ncol(x)-2):(ncol(x)-1),1])`|| "yhat" || "se(yhat)";
		end;  
        print "*****************************************************************************";
        print "Data for Visualizing Conditional Effect of Focal Predictor";
	    print focvals [colname = cnms label = "" format = &decimals];
		if (ncovs > 0) then;do;
          print "NOTE: For data above, covariates are set to their sample means";
		end;
	  end;
    end;
    if (diagnose = 1) then;do;
      print "******************************** DIAGNOSTICS ********************************";  
      cleric1=xmins`||xmaxs`;cleric2=ymin||ymax;cleric3=yhmin||yhmax;cleric4=resmin||resmax;cleric5=trmin||trmax;
	  cleric=cleric1//cleric2//cleric3//cleric4//cleric5;
	  ivnms=ivnms[1:(ncol(x)-1),];
	  vnms=ivnms//tpy;
	  vnms2="y-hat"//"resid"//"t-resid";
	  vnms=vnms//vnms2;
	  cleric=cleric[2:nrow(cleric),];
	  cnms="Minimum"||"Maximum";
	  print cleric [label="Variable minimums and maximums" rowname=vnms colname=cnms format=8.4];
	  md=(n*hat-1)*((n-1)/n);
	  cook=(stri#stri)#(hat/((1-hat)*(ncol(x))));
	  ex=resid/(1-hat);
	  diagn=rownum||x[,2:ncol(x)]||y||pred||resid||ex||stri||tri||hat||md||cook;
      temp=diagn;
      temp[rank(diagn[,1]),]=diagn;
      diagn=temp;
	  nms="casenum"||nms[2:(1+pr),1]`||outv||"pred"||"resid"||"de"||"str"||"tr"||"h"||"md"||"cook";
      create &diagnose from diagn [colname=nms];append from diagn;
	  bp=abs(tri)||bp||rownum;
	  temp=bp;
      temp[rank(bp[,1]),]=bp;
	  bp=temp;
	  bp=bp[n,];
	  if ((bp[1,1]=abs(trmin)) & (trmin < 0)) then;do;
        bp[1,1]=-bp[1,1];
	  end;
	  cnms="t-resid"||"p-value"||"Casenum";
	  print bp [label="Bonferroni-corrected p for largest t-residual" colname=cnms format=&decimals];
    end;
    print "************************ ANALYSIS NOTES AND WARNINGS ************************";
    print conf [label = "Level of confidence for confidence intervals intervals:"];
    do i = 1 to notes;
      if (note[i,1]=1) then;do;
        print nmiss [label="NOTE: Some cases with missing data deleted.  The number of such cases was:"];
	  end;
	  if (note[i,1]=2) then;do;
        print "NOTE: Dominance analysis not available with multicategorical regressors or interactions.";
	  end;
	  if (note[i,1]=3) then;do;
        print "NOTE: All subsets regression not available with multicategorical regressors or interactions.";
	  end;
	  if (note[i,1]=4) then;do;
        print "NOTE: MODVAL option not available for use with a multicategorical moderator.";
	  end;
	  if (note[i,1]=5) then;do;
        print "NOTE: A heteroscedasticity consistent standard error estimator was used.";
	  end;
	  if (note[i,1]=6) then;do;
        print "NOTE: MCX option is ignored when focal predictor or moderator is multicategorical.";
	  end;
	  if (note[i,1]=7) then;do;
        print "NOTE: All subsets and dominance analysis not available with fewer than 2 or more than 15 regressors.";
	  end;
	  if (note[i,1]=8) then;do;
        print "NOTE: Confidence level restricted to between 50 and 99.9999%. 95% confidence is provided in output.";
	  end;
	  if (note[i,1]=9) then;do;
        print "NOTE: Tests of sets of regressors not implemented for models with an interaction.";
	  end;
	  if (note[i,1]=10) then;do;
        print "NOTE: Insufficient number of regressors for your requested test on a set.";
	  end;
	  if (note[i,1]=11) then;do;
        print "NOTE: Your contrast vector is not of the correct length for this model.";
	  end;
    end;
    if ((alperr = 1) & (jn > 0)) then;do;
      print "ERROR: Inappropriate alpha level requested.";
    end;
  end;  
  if (ncol(centerv) > 1) then;do;
    centerv=centerv[,2:ncol(centerv)];
	print "NOTE: The following variables were mean centered prior to analysis:";
	print centerv [label = " "];
  end;
end;  
do i = 1 to errs;
  if (errsm[i,1]=1) then;do;
    print "ERROR: Only one variable can be specified as the outcome Y.";
  end;
  if (errsm[i,1]=2) then;do;
    print "ERROR: With moderation, you must specify at least two variables in the X= list.";
  end;
  if (errsm[i,1]=3) then;do;
    print "ERROR: Focal predictor and moderator cannot both be specified as multicategorical.";
  end;
  if (errsm[i,1]=4) then;do;
    print "ERROR: Categorical variables cannot have more than 10 categories.";
  end;
  if (errsm[i,1]=5) then;do;
    print "ERROR: One of the variables in the model exhibits no variation.";
  end;
  if (errsm[i,1]=6) then;do;
    print "ERROR: Each group must have at least two cases.";
  end;
  if (errsm[i,1]=7) then;do;
    print "ERROR: Y cannot be a dichotomous variable.";
  end;
  if (errsm[i,1]=8) then;do;
    print "ERROR: No cases without missing data available for analysis.";
  end;
  if (errsm[i,1]=9) then;do;
    print "ERROR: A spline segment must contain at least two cases.";
  end;
  if (errsm[i,1]=10) then;do;
    print "ERROR: All spline joints must be larger than the minimum observed value.";
  end;
  if (errsm[i,1]=11) then;do;
    print "ERROR: Spline joints must be listed in ascending order with no ties.";
  end;
  if (errsm[i,1]=12) then;do;
    print "ERROR: The RLM spline function works with 10 or fewer joints.";
  end;
end;
quit;
options pagesize=54;
%mend;




